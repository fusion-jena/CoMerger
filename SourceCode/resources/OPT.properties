# --------------------------------------------------
# The URIs of two ontologies, which are to be matched further. 
# Instructions: Both of the ontologies should be stored locally, and should be 
# added "file:" or "file:\\" before the file paths. If using GUI mode to start, 
# the parameters do not take effect, and the ontologies can be chosen from GUI.
onto1 = 
onto2 = 

# --------------------------------------------------
# The file path for outputting alignments (mappings). 
# Instructions: Please do not add "file:" or "file:\\" before the file path. If 
# using GUI mode to start, the parameter does not take effect, and the file can 
# be chosen from GUI.
output = ./temp/tempResult.rdf

# --------------------------------------------------
# The file path of reference alignments file for evaluation. 
# Instructions: If the reference file does not exist, leave blank, which can 
# skip the evaluation step. If using GUI mode to start, the parameter does not 
# take effect, and the reference file can be chosen from GUI.
reference = 


# **************************************************
# iws.falcon.cc.Parameters
# **************************************************

# --------------------------------------------------
# Three levels of comparability used for matcher integration.
# Instructions: The higher the level is, the better the alignments generated by 
# the matcher are. Usually, the matcher with highComp can always be believed; 
# while with mediumComp, the results can only be partially accepted. If the 
# level is low, they might be reject to be the final alignments for output. 
lowComp = 0
mediumComp = 1
highComp = 2

# --------------------------------------------------	
# The values of the linguistic comparability.
# Instructions: The values are divided into three categories. The ones in 
# (lingHighValue, 1] are highComp; in (lingLowValue, lingHighValue] are 
# mediumComp; otherwise, lowComp.
lingHighValue = 0.9
lingLowValue = 0.035

# --------------------------------------------------
# For estimating linguistic comparability.
# Instructions: The similarities of the alignments generated by StringMatcher 
# or VDocMatcher are divided to three categories. The ones in (lingHighSim, 1] 
# are high, in (lingLowSim,lingHighSim] are medium, otherwise are low.
lingHighSim = 0.7
lingLowSim = 0.0003

# --------------------------------------------------
# structPercent = |stmts|/(|classes|+|properties|+|instances|). 
# Instructions: The percents of the two ontologies are compared for the 
# structural comparability. If one is larger than the other over structPercent 
# times, the two ontologies are quite different in structure, so the 
# comparability is lowComp.
structPercent = 5

# --------------------------------------------------
# The shared built-in vocabularies are computed in VSM. 
# Instructions: The values in (struHighValue, 1] indicate that the two 
# ontologies are similar since they use similar vocabularies. The ones in 
# (struLowValue, struHighValue] are medium. Otherwise, low. But, it is just the
# first step to estimate the comparability.	
structHighValue = 0.95
structLowValue = 0.5
	
# --------------------------------------------------
# The comparability is further estimated by a sampling technique. 
# Instructions: The alignments with lingHighSim generated by StringMatcher or 
# V-Doc are assumed to be correct. Via comparing the alignments found by 
# GmoMatcher to the presumed correct ones, the rough correctness of GMO can be 
# measured. If the values are in (struHighRate, 1], the alignments from 
# GmoMatcher are believed to be correct, and the rest of the alignments are 
# also accepted to be integrated in the final output.	
structHighRate = 0.49
structLowRate = 0.25

# --------------------------------------------------
# The weight for combining StringMatcher and VDocMatcher. 
# Instructions: If the comparability of StringMatcher and VDocMatcher are 
# equal, the alignments of the two matchers are combined. The similarities of 
# VDocMatcher time combWeight, the ones of StringMatcher time (1-combWeight).	
combWeight = 0.5

# --------------------------------------------------
# The parameter for include instance matching or not. 
# Instructions: If only using Falcon-AO for ontology matching at conceptual 
#level (classes & properties, excluding instances), inclInstMatch = false.
inclInstMatch = false

# --------------------------------------------------
# For large-scale ontologies. 
# Instructions: If the number of statements in either of the two ontologies is 
# more than 5000, it can be treated as a large-scale ontology, which is 
# partitioned firstly. 	
largeOnto = 100	


# **************************************************
# iws.falcon.matcher.pbm.Parameters
# **************************************************

# --------------------------------------------------
# The threshold for generating anchors. 
# Instructions: If the similarity between the two entities is larger than 
# anchorCutoff, then it is treated as an anchor for computing block mappings.
anchorCutoff = 0.85
	
# --------------------------------------------------
# The weights for cutting similarities. 
# Instructions: structCompCutOff is used to filter the linguistic similarities 
# in each ontology. Values in (structCompCutoff, 1] are transformed as links. 
structCompCutoff = 0
	
# --------------------------------------------------
# The weights for forming the final links. 
# Instructions: hierWeight for property hierarchical similarity, (1-hierWeight)
# for domain/range similarity.
hierWeight = 0.5

# --------------------------------------------------
# The threshold for filtering block mappings. 
# Instructions: The block mappings are computed by the distribution of the 
# anchors in each block pairs. If the value is larger than threshold, the 
# mapping is treated as a matched block pair, and the two blocks are treated as 
# small sub-ontologies and to be matched further.
threshold = 0.075


# **************************************************
# iws.falcon.matcher.string.Parameters
# **************************************************

# --------------------------------------------------
# Two string comparison techniques are imported in StringMatcher. 
# 0 is represented for ISub, 1 is for EditDistance (Levenshtein).
method = 0

# --------------------------------------------------
# The weights for local names, labels, and comments. 
# Instructions: localnames of two entities are compared, and so as labels and 
# comments. The largest values of localnames, labels and comments are selected 
# as the similarity between the two entities.	
stringLocalnameWeight = 1.0
stringLabelWeight = 1.0
stringCommentWeight = 1.0


# **************************************************
# iws.falcon.matcher.vdoc.Parameters
# **************************************************

# --------------------------------------------------
# The weights for local description matrix, subject neighboring description 
# matrix, predicate neighboring description matrix and object neighboring 
# description matrix. 
# Instructions: Usually, it is recommended that subjectWeight, predicateWeight 
# and objectWeight are less than 0.5.
basicWeight = 1.0
subjectWeight = 0.1
predicateWeight = 0.1
objectWeight = 0.1

# --------------------------------------------------
# The weights for localnames, labels, and comments. 
vdocLocalnameWeight = 1.0
vdocLabelWeight = 0.5
vdocCommentWeight = 0.25


# **************************************************
# iws.falcon.matcher.gmo.Parameters
# **************************************************

# --------------------------------------------------
# The iteration times for GmoMatcher termination. 
# Instructions: Usually, 12 times is enough to converge.
iterTimes = 12
	
# --------------------------------------------------
# The convergence of the similarity matrix. 
# If the distance between the old matrix and the new one is less than 
# convergence, GmoMatcher stops immediately. It is unnecessary to run until 
# iterTimes.
convergence = 10E-9


# **************************************************
# iws.falcon.output.Parameters
# **************************************************

# --------------------------------------------------
# F-Measure = (1+alpha)(precision*recall)/(alpha*precision+recall)
alpha = 1